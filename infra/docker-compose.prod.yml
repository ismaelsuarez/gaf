version: "3.8"

networks:
  vendure_net:
    driver: bridge

volumes:
  vendure_postgres_data:
  vendure_assets:
  traefik_letsencrypt:

services:
  traefik:
    image: traefik:2.11
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - vendure_net
    restart: unless-stopped

  postgres:
    image: postgres:${POSTGRES_TAG:-16.4-alpine}
    container_name: vendure_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-vendure}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vendure}
      POSTGRES_DB: ${POSTGRES_DB:-vendure}
    volumes:
      - vendure_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vendure} -d ${POSTGRES_DB:-vendure}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - vendure_net

  vendure_server:
    build:
      context: ../apps/vendure
      dockerfile: Dockerfile
    container_name: vendure_server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-vendure}
      DB_USERNAME: ${POSTGRES_USER:-vendure}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-vendure}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@admin.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
      PORT: 3000
    volumes:
      - vendure_assets:/app/static/assets
    labels:
      - traefik.enable=true
      - traefik.http.routers.vendure.rule=Host(`${VENDURE_DOMAIN}`)
      - traefik.http.routers.vendure.entrypoints=websecure
      - traefik.http.routers.vendure.tls.certresolver=le
      - traefik.http.services.vendure.loadbalancer.server.port=3000
    restart: unless-stopped
    networks:
      - vendure_net
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  vendure_worker:
    build:
      context: ../apps/vendure
      dockerfile: Dockerfile
    container_name: vendure_worker
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-vendure}
      DB_USERNAME: ${POSTGRES_USER:-vendure}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-vendure}
    command: ["npm", "run", "start:worker"]
    volumes:
      - vendure_assets:/app/static/assets
    restart: unless-stopped
    networks:
      - vendure_net
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  storefront:
    build:
      context: ../apps/storefront
      dockerfile: Dockerfile
      args:
        STORE_FRONT_REF: ${STORE_FRONT_REF:-main}
    container_name: storefront
    environment:
      NODE_ENV: production
      VENDURE_API_URL: http://vendure_server:3000/shop-api
      PORT: 4000
    depends_on:
      vendure_server:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.storefront.rule=Host(`${STOREFRONT_DOMAIN}`)
      - traefik.http.routers.storefront.entrypoints=websecure
      - traefik.http.routers.storefront.tls.certresolver=le
      - traefik.http.services.storefront.loadbalancer.server.port=4000
    restart: unless-stopped
    networks:
      - vendure_net
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M


